import numpy as np
import pandas as pd
import os
import time, datetime
import boto3
import botocore

# To load the environment variables
from dotenv import load_dotenv
load_dotenv()

# for Database connection
from peewee import MySQLDatabase, Model, TextField
from playhouse.reflection import generate_models, print_model, print_table_sql
from sqlalchemy import create_engine 



def get_db_object():
    """
    Function to get the db connection
    :param args. None
    :para returns. db_object
    """

    try:
        mysql_db = MySQLDatabase(
                os.getenv("DB_DATABASE"),
                user = os.getenv("DB_USERNAME"),
                password = os.getenv("DB_PASSWORD"),
                host = os.getenv("DB_HOST"),
                port = int(os.getenv("DB_PORT"))
            )
        
    except Exception as e:
        print(e)
        return None
    return mysql_db




# Function to extract quotes from a single page
def extract_content_from_site(soup):
    cars_data = []
    cars_list = soup.find("div", class_="_5Qs6v")
    cars = cars_list.find_all("a", class_="_1_1Uy")
    for car in cars:
        car_data = car.find("h3", class_="_2Out2").get_text()
        price_data = car.find("span", class_="_1t1AA").get_text()
        cars_data.append({"car": car_data, "price": price_data})
    return cars_data


def get_source_db_object():
    """
    Function to get the db connection
    :param args. None
    :para returns. db_object
    """
    try:
        engine_source = create_engine('mysql+pymysql://testuser1:abc123dfg@127.0.0.1:3306/autocheck', echo=False)
        
    except Exception as e:
        print(e)
        return None
    return engine_source 


def load_site_content_to_db(dataframe):
    """
    This function is to get the files list from DB to be downloaded for 
    the current session
    :param args. run_id - an string value, generated by laravel application
    :param args. process_id - an string value, set by airflow
    :param returns. list of string - containing file names for the current session
    """
    engine_source = get_source_db_object()
    
    # connect the pandas dataframe with postgresql table 
    query =  dataframe.to_sql("data_scrapping", engine_source, if_exists='append', index=False) 
    
    return query

